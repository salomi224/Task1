{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "098deb26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1. Add Task\n",
      "2. Delete Task\n",
      "3. Mark Task as Completed\n",
      "4. Display Tasks\n",
      "5. Quit\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "\n",
    "# Function to load tasks from a file\n",
    "def load_tasks():\n",
    "    try:\n",
    "        with open(\"tasks.json\", \"r\") as file:\n",
    "            tasks = json.load(file)\n",
    "    except FileNotFoundError:\n",
    "        tasks = []\n",
    "    return tasks\n",
    "\n",
    "# Function to save tasks to a file\n",
    "def save_tasks(tasks):\n",
    "    with open(\"tasks.json\", \"w\") as file:\n",
    "        json.dump(tasks, file)\n",
    "\n",
    "# Function to display tasks\n",
    "def display_tasks(tasks):\n",
    "    print(\"Tasks:\")\n",
    "    for i, task in enumerate(tasks, 1):\n",
    "        print(f\"{i}. {task['task']} - {'Done' if task['completed'] else 'Not Done'}\")\n",
    "\n",
    "# Function to add a task\n",
    "def add_task(tasks, task_name):\n",
    "    tasks.append({\"task\": task_name, \"completed\": False})\n",
    "\n",
    "# Function to delete a task\n",
    "def delete_task(tasks, task_index):\n",
    "    del tasks[task_index]\n",
    "\n",
    "# Function to mark a task as completed\n",
    "def complete_task(tasks, task_index):\n",
    "    tasks[task_index][\"completed\"] = True\n",
    "\n",
    "def main():\n",
    "    tasks = load_tasks()\n",
    "\n",
    "    while True:\n",
    "        print(\"\\n1. Add Task\")\n",
    "        print(\"2. Delete Task\")\n",
    "        print(\"3. Mark Task as Completed\")\n",
    "        print(\"4. Display Tasks\")\n",
    "        print(\"5. Quit\")\n",
    "\n",
    "        choice = input(\"Enter your choice: \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            task_name = input(\"Enter task name: \")\n",
    "            add_task(tasks, task_name)\n",
    "        elif choice == \"2\":\n",
    "            display_tasks(tasks)\n",
    "            task_index = int(input(\"Enter task number to delete: \")) - 1\n",
    "            delete_task(tasks, task_index)\n",
    "        elif choice == \"3\":\n",
    "            display_tasks(tasks)\n",
    "            task_index = int(input(\"Enter task number to mark as completed: \")) - 1\n",
    "            complete_task(tasks, task_index)\n",
    "        elif choice == \"4\":\n",
    "            display_tasks(tasks)\n",
    "        elif choice == \"5\":\n",
    "            save_tasks(tasks)\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b80ca61e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
